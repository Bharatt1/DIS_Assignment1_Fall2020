using System;

namespace Assignment1_Fall2020
{
    class Program
    {
        static void Main(string[] args)
        {
            int n = 5;
            PrintTriangle(n);

            int n2 = 5;
            PrintSeriesSum(n2);

            int[] A = new int[] { 1, 2, 2, 6 }; ;
            bool check = MonotonicCheck(A);
            Console.WriteLine(check);
            Console.ReadLine();

            int[] nums = new int[] { 1, 3, 1, 5, 4 };
            int k = 0;
            int pairs = DiffPairs(nums, k);
            Console.WriteLine(pairs);
            Console.ReadLine();

            string keyboard = "abcdefghijklmnopqrstuvwxyz";
            string word = "dis";
            int time = BullsKeyboard(keyboard, word);
            Console.WriteLine(time);
            Console.ReadLine();

            string str1 = "goulls";
            string str2 = "gobulls";
            int minEdits = StringEdit(str1, str2);
            Console.WriteLine(minEdits);

        }

        public static void PrintTriangle(int x)
        {
            try
            {
                int i, j, n; // creating 3 variables
                n = x; // Ensuring variables x and n are equal as we are calling n
                // Console.WriteLine("Enter number of rows for triangle: "); // Enter the number of rows you would like for a triangle
                // x = Convert.ToInt32(Console.ReadLine()); // read and process the input from the previous WriteLine statement
                
                for (j = 1; j <= x; j++) // for everytime j is smaller than or equal to x (input), go through the loop in the bottom, and add one to j after and continue the loop till j is larger than x
                {
                    for (i = 1; i < n; i++) // if j is smaller than or equal to n(input), compute this
                        Console.Write(" "); // this creates spaces in lines prior to *'s
                    n--; // subtract a space from every line
                    for (i = 1; i <= 2 * j - 1; i++) // this determines the number of *'s in each line (starting with 1, when each line increases, you compute 2*j-1 to determine the number of stars)
                        Console.Write("*"); // Computes the stars
                    Console.WriteLine(); // Prints 
                }
                Console.ReadLine();
            }
            catch
            {
                Console.WriteLine("Exception occured while computing PrintTriangle()");
            }
        }

        public static void PrintSeriesSum(int n2)
        {
            try
            {
                int sum = 0;
                // Console.WriteLine("Input series number: "); // if we needed to take users input into value n2:
                // n2 = Convert.ToInt32(Console.ReadLine());
                Console.Write("The odd numbers are: "); // prints out odd numbers from input value n2
                for (int i = 1; i <= n2; i++) // Let i start at 1. If i is smaller than or equal to n2, go through the next statement
                {
                    Console.Write(" "+ (2 * i - 1)); // print out all odd numbers of input starting with 1 
                    sum = sum + 2 * i - 1; // sum all the odd values from previous statement
                }
            Console.WriteLine("\nThe sum is: " + sum); // print out the sum
            }
            catch
            {
                Console.WriteLine("Exception occured while computing PrintSeriesSum()");
            }
            Console.ReadLine();
        }

        public static bool MonotonicCheck(int[] n)
        {
            try
            {
                return increasing(n) || decreasing(n); // return if it is monotonically increasing OR monotonically decreasing
                bool increasing(int[] n) // Using a boolean to determine whether it is increasing 
                {
                    for (int i = 0; i < n.Length - 1; i++) // starting i at index 0, till i is smaller than index length, process the next statement
                        if (n[i] > n[i + 1]) // if index 0 is larger than index 1, then it is not increasing monotonically, however if not, continue by adding 1 to i until we reach all the values in the array. If it is continuously increasing per value, then print true
                            return false; // thus we print false if it is not increasing monotonically
                    return true; // otherwise, we print true if it is increasing monotonically
                }

                bool decreasing(int[] n) // Using a boolean to determine whether it is increasing
                {
                    for (int i = 0; i < n.Length - 1; i++) // starting i at index 0, till i is smaller than index length, process the next statement
                        if (n[i] < n[i + 1]) // if index 0 is smaller than index 1, then it is not decreasing monotonically, however if not, continue by adding 1 to i until we reach all the values in the array. If it is continuously decreasing per value, then print true
                            return false; // thus we print false if it is not decreasing monotonically
                    return true; // otherwise, we print true if it is decreasing monotonically
                }
            }
            catch
            {
                Console.WriteLine("Exception occured while computing MonotonicCheck()");
                return false; // if an incorrect input is present, print false
            }

            
        }

        public static int DiffPairs(int[] J, int k)
        {
            try
            {
                
                for (int i = 0; i < J.Length; i++) // starting i at index 0, till i is smaller than length of the array, process the next statement
                {
                    for (int j = i + 1; j < J.Length; j++) // loop through all values and compare it with i
                    {
                        if (J[j] == k - J[i]) // if the difference of array index position I and J is equal to the difference k
                        {
                            return new int[] { i, j }; // return the number of pairs that result in that
                        }
                    }
                }
            }
            catch
            {
                Console.WriteLine("Exception occured while computing DiffPairs()");
            }
            return 0;
        }

        public static int BullsKeyboard(string keyboard, string word)
        {
            try
            {
                char[] chars = keyboard.ToCharArray(); // put all inputs into characters
                int[] countArray = new int[26]; // 
                for (int i = 0; i < countArray.Length; i++)
                {
                    countArray[chars[i] - 'a'] = i;
                }

                int result = 0, position = 0; // our finger starts at index 0
                char[] charsWord = word.ToCharArray();
                for (int i = 0; i < charsWord.Length; i++)
                {
                    result = result + Math.Abs(countArray[charsWord[i] - 'a'] - position);
                    position = countArray[charsWord[i] - 'a'];
                }
                return result;
            }
            catch
            {
                Console.WriteLine("Exception occured while computing BullsKeyboard()");
            }

            return 0;
        }

        public static int StringEdit(string str1, string str2)
        {
            try
            {
                Console.WriteLine("Str1: "); // asks for user input
                str1 = Console.ReadLine(); // reads user input as string 1
                Console.WriteLine("Str2: "); // asks for user input
                str2 = Console.ReadLine(); // reads user input as string 2
                int a = str1.Length; // let a = string 1's length
                int b = str2.Length; // let b = string 2's length
                int[,] c = new int[a + 1, b + 1]; // let c = array 

                if (a == 0) // if the length of string 1 is equal to 0
                {
                    return b; // return string 2's length
                }
                if (b == 0) // if the length of string 2 is equal to 0
                {
                    return a; // return string 1's length
                }
                for (int i = 0; i<=a; c[i,0] = i++) { } // 
                for (int j = 0; j<=b; c[0,j] = j++) { }
                for (int i = 1; i<=a; i++)
                {
                    for (int j = 1; j<=b; j++)
                    {
                        int cost = (str2[j - 1] == str1[i - 1]) ? 0 : 1;
                        c[i, j] = Math.Min(Math.Min(c[i - 1, j] + 1, c[i, j - 1] + 1), c[i - 1, j - 1] + cost); // finding the minimum of all three functions (insert, remove and replace)
                    }
                }
                return c[a, b];
                
                

                    
            }
            catch
            {
                Console.WriteLine("Exception occured while computing StringEdit()");
            }

            return 0;
        }
    }

}
